#define StepperDirectionPin (7)
#define SteppingPin (6)
#define ServoPin (11)

#define Steps
#define Rotations
#define OneRotationInSteps (400)
#define StepsPerDiscreteLocation (10)
#define Once (1)
#define Twice (2)
#define ClockWise (HIGH)
#define CounterClockWise (LOW)

static int currentStepperLocation;

static int ConvertTwoLocationsAndDirectionToNumberOfSteps(int currentLocation, int newLocation, bool direction) {
  if (currentLocation < 0 || newLocation < 0 || currentLocation >= 40 || newLocation >= 40) {
    Serial.println("ERROR. LOCATION OUT OF BOUNDS!");
  }
  int difference = currentLocation - newLocation;
  if (difference >= 0 && direction == CounterClockWise) {
    return difference * StepsPerDiscreteLocation;
  }
  else if (difference >= 0 && direction == ClockWise) {
    return (400 - difference * StepsPerDiscreteLocation);
  }
  else if (difference < 0 && direction == CounterClockWise) {
    return (400 + difference * StepsPerDiscreteLocation);
  }
  else if (difference < 0 && direction == ClockWise) {
    return (- difference * StepsPerDiscreteLocation);
  }
}

static void FixCurrentLocation(int newLocation) {
  currentStepperLocation = newLocation;
}

static void SetDirectionOfStepperMotorTo(bool direction) {
  digitalWrite(StepperDirectionPin, direction);
}

static void StepMotorToLocation(int newLocation, bool direction) {
  FixCurrentLocation(newLocation);
  SetDirectionOfStepperMotorTo(direction);
  int steps = ConvertTwoLocationsAndDirectionToNumberOfSteps(currentStepperLocation, newLocation, direction);
  for(int i = 0; i < steps; i++) {
    digitalWrite(SteppingPin, HIGH);
    delay(1);
    digitalWrite(SteppingPin, LOW);
    delay(1);
  }
}

static void FullyRotateStepper(int numberOfRotations, int direction) {
  SetDirectionOfStepperMotorTo(direction);
  for(int i = 0; i < OneRotationInSteps * numberOfRotations; i++) {
  digitalWrite(SteppingPin, HIGH);
  delay(1);
  digitalWrite(SteppingPin, LOW);
  delay(1);
  }
}

void setup() {
  Serial.begin(9600);
  /*
   * It is very important that the lock start out pointed at 0
   */
  currentStepperLocation = 0;
  
  pinMode(StepperDirectionPin, OUTPUT);
  pinMode(SteppingPin, OUTPUT);
  pinMode(ServoPin, OUTPUT);
}

void loop() {
  for (int firstValue = 0; firstValue <= 39; firstValue++) {
    for (int secondValue = 0; secondValue <= 39; secondValue++) {
      FullyRotateStepper(Twice, ClockWise);
      StepMotorToLocation(firstValue, ClockWise);
      FullyRotateStepper(Once, CounterClockWise);
      StepMotorToLocation(secondValue, CounterClockWise);
      for (int thirdValue = 0; thirdValue <= 39; thirdValue++) {
        StepMotorToLocation(thirdValue, ClockWise);
      }
    }
  }
  while(true){};
}
